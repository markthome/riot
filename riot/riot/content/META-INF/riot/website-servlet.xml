<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:override="http://www.riotfamily.org/schema/common/override"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/util
		http://www.springframework.org/schema/util/spring-util-4.3.xsd
		http://www.riotfamily.org/schema/common/override
		http://www.riotfamily.org/schema/common/override-9.3.xsd">

	<override:put ref="freemarkerConfig" property="macroLibraries">
		<entry key="inplace" value="classpath:org/riotfamily/components/view/inplace.ftl" />
		<entry key="pages" value="classpath:org/riotfamily/pages/view/pages.ftl" />
	</override:put>
	
	<override:add ref="freemarkerObjectWrapper" property="tagGenerators">
		<bean class="org.riotfamily.components.cache.ContentFacadeCacheTagGenerator">
			<constructor-arg ref="sessionFactory" />
		</bean>
	</override:add>
	
	<bean class="org.riotfamily.components.index.ContentFilterRequestInterceptor">
		<constructor-arg ref="sessionFactory" />
	</bean>
	
	<bean class="org.riotfamily.components.view.ContentMapObjectWrapperPlugin">
		<description>
			ObjectWrapperPlugin that wraps ContentMaps with a MapModel 
			(instead of a SimpleHash) so that getOwner(), getId() etc. can be 
			accessed by a template.
		</description>
	</bean>
	
	<bean id="inplaceMacroHelper" class="org.riotfamily.components.view.InplaceMacroHelperFactory">
		<constructor-arg ref="componentListRenderer" />
		<constructor-arg ref="viewComponentRenderer" />
		<property name="toolbarScripts">
			<list>
				<value>riot/resources.js</value>
				<value>toolbar-loader.js</value>
			</list>
		</property>
	</bean>
	
	<override:bean ref="cacheKeyAugmentor" class="org.riotfamily.components.cache.EditModeCacheKeyAugmentor" />

	<!-- Initialize the ComponentRenderer --> 
 	<bean class="org.riotfamily.components.render.component.ViewComponentRendererInitializer">
 		<constructor-arg ref="viewComponentRenderer" />
 	</bean>
 	
 	<!-- Pages -->
 	
 	<bean id="pageHandlerMapping" class="org.riotfamily.pages.mapping.PageHandlerMapping">
		<property name="interceptors">
			<list>
				<bean class="org.riotfamily.core.view.NoCacheHeaderInterceptor" />
			</list>
		</property>
		<property name="order" value="2" />
	</bean>
	
	<bean id="noSiteHandlerMapping" class="org.riotfamily.pages.mapping.NoSiteHandlerMapping" />
			
	<bean id="siteObjectWrapperPlugin" class="org.riotfamily.pages.view.SiteObjectWrapperPlugin" />
	<bean id="pageObjectWrapperPlugin" class="org.riotfamily.pages.view.PageObjectWrapperPlugin" />
	<bean id="pageFacadeObjectWrapperPlugin" class="org.riotfamily.pages.view.PageFacadeObjectWrapperPlugin" />
	<bean id="contentContainerOwnerObjectWrapperPlugin" class="org.riotfamily.components.view.ContentContainerOwnerObjectWrapperPlugin" />
		 
	<override:add ref="inplaceMacroHelper" property="dynamicToolbarScripts" append="true">
		<bean class="org.riotfamily.pages.view.PageToolbarScript" />
	</override:add>

	<bean id="pageContextExposer" class="org.riotfamily.pages.view.PageContextExposer" />
	
	<override:add ref="annotationMethodHandlerAdapter" property="customArgumentResolvers">
		<bean class="org.riotfamily.pages.annotations.PageArgumentResolver" />
		<bean class="org.riotfamily.pages.annotations.SiteArgumentResolver" /> 
		<bean class="org.riotfamily.pages.annotations.PagePropertyArgumentResolver" />
		<bean class="org.riotfamily.pages.annotations.SitePropertyArgumentResolver" />
	</override:add>
	
	<override:add ref="annotationMethodHandlerAdapter" property="ignoredTypes">
		<value>org.riotfamily.pages.model.Page</value>
		<value>org.riotfamily.pages.model.Site</value>
	</override:add>
	
	<override:add ref="annotationMethodHandlerAdapter" property="ignoredAnnotations">
		<value>org.riotfamily.pages.annotations.PageProperty</value>
		<value>org.riotfamily.pages.annotations.SiteProperty</value>
	</override:add>		

</beans>
