/* Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.riotfamily.revolt.dialect;

import org.riotfamily.revolt.Script;
import org.riotfamily.revolt.definition.Column;
import org.riotfamily.revolt.definition.Index;
import org.riotfamily.revolt.support.TypeMap;

/**
 * @author Felix Gnass [fgnass at neteye dot de]
 * 
 */
public class HsqlDialect extends Sql92Dialect {

	protected void registerTypes() {
		registerType(TypeMap.BIT, TypeMap.BIT);
		registerType(TypeMap.TINYINT, TypeMap.TINYINT);
		registerType(TypeMap.SMALLINT, TypeMap.SMALLINT);
		registerType(TypeMap.INTEGER, TypeMap.INTEGER);
		registerType(TypeMap.BIGINT, TypeMap.BIGINT);
		registerType(TypeMap.FLOAT, TypeMap.FLOAT);
		registerType(TypeMap.REAL, TypeMap.REAL);
		registerType(TypeMap.DOUBLE, TypeMap.DOUBLE);
		registerType(TypeMap.NUMERIC, TypeMap.NUMERIC);
		registerType(TypeMap.DECIMAL, TypeMap.DECIMAL);
		registerType(TypeMap.CHAR, TypeMap.CHAR);
		registerType(TypeMap.VARCHAR, TypeMap.VARCHAR);
		registerType(TypeMap.LONGVARCHAR, TypeMap.LONGVARCHAR);
		registerType(TypeMap.DATE, TypeMap.DATE);
		registerType(TypeMap.TIME, TypeMap.TIME);
		registerType(TypeMap.TIMESTAMP, TypeMap.TIMESTAMP);
		registerType(TypeMap.BINARY, TypeMap.BINARY);
		registerType(TypeMap.VARBINARY, TypeMap.VARBINARY);
		registerType(TypeMap.LONGVARBINARY, TypeMap.LONGVARBINARY);
		registerType(TypeMap.BLOB, TypeMap.BLOB);
		registerType(TypeMap.CLOB, TypeMap.CLOB);
	}

	public boolean supports(String databaseProductName, 
			int majorVersion, int minorVersion) {

		return "HSQL Database Engine".equals(databaseProductName);
	}
	
	protected void addColumnDefinition(Script sql, Column column) {
		if (column.isAutoIncrement()) {
			sql.append(quote(column)).append(getColumnType(column));
			sql.append("GENERATED BY DEFAULT AS IDENTITY");
		}
		else {
			super.addColumnDefinition(sql, column);
		}
	}
	
	public Script createAutoIncrementSequence(String name) {
		return null;
	}
	
	public Script renameTable(String name, String renameTo) {
		return alterTable(name).append("RENAME TO").append(quote(renameTo));
	}

	public Script createIndex(String table, Index index) {
		Script sql = new Script("CREATE INDEX").append(index.getName())
				.append("ON").append(quote(table));
		
		addColumnNames(sql, index.getColumns());
		return sql;
	}

	public Script dropIndex(String table, String name) {
		return new Script("DROP INDEX").append(name);
	}

	public Script modifyColumn(String table, Column column) {
		Script sql = new Script();
		sql.append("ALTER TABLE").append(quote(table)).append("ALTER COLUMN");
		addColumnDefinition(sql, column);
		return sql;
	}

	public Script renameColumn(String table, String name, String renameTo) {
		return alterTable(table).append("RENAME COLUMN").append(quote(name))
				.append("TO").append(quote(renameTo));
	}

}
